import OpenAI from 'openai';
import { QuestionClassification } from './eunacom-taxonomy';
import { EunacomTaxonomyDbService } from './eunacom-taxonomy-db.service';
import { logger } from '../utils/logger';

export interface AIAnalysisResult extends QuestionClassification {
  baseDifficulty: 'EASY' | 'MEDIUM' | 'HARD';
  reviewNotes?: string;
}

export interface QuestionVariationResult {
  content: string;
  explanation: string;
  alternatives: {
    text: string;
    isCorrect: boolean;
    explanation: string;
  }[];
}

export class OpenAIService {
  private openai: OpenAI;

  constructor() {
    const apiKey = process.env.OPENAI_API_KEY || '';

    logger.info(`OpenAI API Key configured: ${apiKey ? 'YES' : 'NO'}`);

    if (!apiKey) {
      logger.warn('OPENAI_API_KEY not configured. AI features will be limited.');
      throw new Error('OpenAI API Key is required');
    } else {
      logger.info(`OpenAI API Key length: ${apiKey.length} characters`);
    }

    this.openai = new OpenAI({
      apiKey: apiKey,
    });
  }

  /**
   * Analyze a question using OpenAI to classify it according to EUNACOM taxonomy
   */
  async analyzeQuestion(questionContent: string): Promise<AIAnalysisResult> {
    try {
      logger.info(`Starting OpenAI analysis for question: ${questionContent.substring(0, 100)}...`);

      const prompt = await this.buildAnalysisPrompt(questionContent);
      const response = await this.makeAIRequest(prompt, 'analysis');

      logger.info(`OpenAI analysis response received: ${response.substring(0, 200)}...`);

      const result = this.parseAnalysisResponse(response);
      logger.info(`Analysis successful: ${result.specialty} -> ${result.topic}`);

      return result;

    } catch (error) {
      logger.error('Error in OpenAI question analysis:', error);
      throw new Error(`AI analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * Generate a question variation using OpenAI
   */
  async generateQuestionVariation(
    baseQuestion: string,
    analysis: QuestionClassification,
    difficulty: 'EASY' | 'MEDIUM' | 'HARD',
    variationNumber: number
  ): Promise<QuestionVariationResult> {
    try {
      logger.info(`Generating variation ${variationNumber} with difficulty ${difficulty}...`);

      const prompt = this.buildVariationPrompt(baseQuestion, analysis, difficulty, variationNumber);
      const response = await this.makeAIRequest(prompt, 'variation');

      logger.info(`OpenAI variation response received: ${response.substring(0, 200)}...`);

      const result = this.parseVariationResponse(response);
      logger.info(`Variation generated successfully with ${result.alternatives.length} alternatives`);

      return result;

    } catch (error) {
      logger.error('Error in OpenAI question variation:', error);
      throw new Error(`Variation generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * Make a request to OpenAI API using GPT-5 Mini with Responses API
   */
  private async makeAIRequest(prompt: string, type: 'analysis' | 'variation'): Promise<string> {
    try {
      logger.info(`Making OpenAI GPT-5 Mini ${type} request...`);

      // Try GPT-5 Mini first with new Responses API
      try {
        const systemPrompt = "Eres un experto m√©dico especializado en educaci√≥n m√©dica chilena y el examen EUNACOM. Responde siempre en espa√±ol y en formato JSON v√°lido.";
        const fullInput = `${systemPrompt}\n\n${prompt}`;

        const response = await fetch('https://api.openai.com/v1/responses', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            model: "gpt-5-mini",
            input: fullInput,
            reasoning: {
              effort: type === 'analysis' ? "low" : "minimal" // Low for analysis, minimal for variations
            },
            text: {
              verbosity: "medium" // Balanced output length
            },
            max_output_tokens: 2000
          })
        });

        if (response.ok) {
          const data = await response.json() as any;
          const result = data.output_text || data.choices?.[0]?.message?.content;
          
          if (result) {
            logger.info(`OpenAI GPT-5 Mini ${type} request completed successfully`);
            return result;
          }
        } else {
          const errorText = await response.text();
          logger.warn(`GPT-5 Mini failed (${response.status}): ${errorText}, falling back to GPT-4o`);
        }
      } catch (gpt5Error) {
        logger.warn(`GPT-5 Mini request failed: ${gpt5Error instanceof Error ? gpt5Error.message : 'Unknown error'}, falling back to GPT-4o`);
      }

      // Fallback to GPT-4o with Chat Completions API
      logger.info(`Using GPT-4o fallback for ${type} request...`);
      const completion = await this.openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: "Eres un experto m√©dico especializado en educaci√≥n m√©dica chilena y el examen EUNACOM. Responde siempre en espa√±ol y en formato JSON v√°lido."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: type === 'analysis' ? 0.1 : 0.7,
        max_tokens: 2000,
        response_format: { type: "json_object" }
      });

      const response = completion.choices[0]?.message?.content;

      if (!response) {
        throw new Error('No response from OpenAI');
      }

      logger.info(`OpenAI GPT-4o fallback ${type} request completed successfully`);
      return response;

    } catch (error) {
      logger.error(`OpenAI ${type} request failed:`, error);
      throw error;
    }
  }

  /**
   * Build prompt for question analysis
   */
  private async buildAnalysisPrompt(questionContent: string): Promise<string> {
    const taxonomyData = await EunacomTaxonomyDbService.getTaxonomyForAI();
    
    // Crear una representaci√≥n m√°s clara de la taxonom√≠a
    const taxonomyText = taxonomyData.specialties
      .map(spec => {
        const topics = spec.topics.map(topic => `    ‚Ä¢ ${topic.name}`).join('\n');
        return `üè• ${spec.name}\n${topics}`;
      })
      .join('\n\n');

    return `Clasifica esta pregunta m√©dica seg√∫n la taxonom√≠a EUNACOM oficial.

PREGUNTA: "${questionContent}"

TAXONOM√çA EUNACOM (especialidades ‚Üí temas):
${taxonomyText}

INSTRUCCIONES:
1. Lee la pregunta y identifica el concepto m√©dico principal
2. Busca la ESPECIALIDAD exacta en la lista anterior
3. Busca el TEMA exacto dentro de esa especialidad
4. COPIA los nombres EXACTAMENTE como aparecen en la taxonom√≠a
5. NO inventes nombres nuevos

FORMATO DE RESPUESTA (JSON √∫nicamente):
{
  "specialty": "nombre exacto de especialidad",
  "topic": "nombre exacto de tema", 
  "confidence": 0.95,
  "keywords": ["t√©rmino1", "t√©rmino2"],
  "learningObjectives": ["objetivo educativo"],
  "questionType": "CLINICAL_CASE|CONCEPT|PROCEDURE|DIAGNOSIS|TREATMENT|PREVENTION",
  "baseDifficulty": "EASY|MEDIUM|HARD",
  "reviewNotes": "observaciones breves"
}

CRITERIOS DIFICULTAD:
‚Ä¢ EASY: Conceptos b√°sicos, definiciones
‚Ä¢ MEDIUM: Aplicaci√≥n cl√≠nica, diagn√≥stico
‚Ä¢ HARD: Casos complejos, m√∫ltiples variables`;
  }

  /**
   * Build prompt for question variation generation
   */
  private buildVariationPrompt(
    baseQuestion: string,
    analysis: QuestionClassification,
    difficulty: 'EASY' | 'MEDIUM' | 'HARD',
    variationNumber: number
  ): string {
    const difficultyDescriptions = {
      EASY: 'conocimiento b√°sico y conceptos fundamentales',
      MEDIUM: 'aplicaci√≥n cl√≠nica y diagn√≥stico diferencial',
      HARD: 'casos complejos con m√∫ltiples variables y juicio cl√≠nico avanzado'
    };

    // Estrategias espec√≠ficas de diversificaci√≥n por n√∫mero de variaci√≥n
    const variationStrategies = {
      1: 'Cambia la presentaci√≥n del caso (edad, g√©nero, comorbilidades diferentes)',
      2: 'Enf√≥cate en un aspecto diagn√≥stico diferente (laboratorio vs imagen vs examen f√≠sico)',
      3: 'Modifica el contexto cl√≠nico (urgencias vs consulta vs hospitalizaci√≥n)',
      4: 'Cambia el enfoque temporal (agudo vs cr√≥nico vs seguimiento)',
      5: 'Var√≠a las complicaciones o factores de riesgo presentes',
      6: 'Enf√≥cate en manejo terap√©utico o preventivo en lugar de diagn√≥stico'
    };

    const strategy = variationStrategies[variationNumber as keyof typeof variationStrategies] || 'Crea una variaci√≥n √∫nica y diferente';

    return `
Eres un experto en educaci√≥n m√©dica y en el examen EUNACOM chileno. 
Recibir√°s una PREGUNTA BASE (solo el enunciado). 
Tu tarea es transformarla en un ejercicio completo con 4 variaciones de alta calidad, siguiendo las siguientes reglas.

PREGUNTA BASE: "${baseQuestion}"

CLASIFICACI√ìN:
- Especialidad: ${analysis.specialty}
- Tema: ${analysis.topic}
- Dificultad: MEDIUM (aplicaci√≥n cl√≠nica con foco en manejo inmediato)

GENERAR VARIACI√ìN #${variationNumber}:
- Estrategia espec√≠fica: ${strategy}

‚öñÔ∏è REGLAS FUNDAMENTALES:
1. **ENFOQUE CL√çNICO**: Todas las variaciones deben formularse como casos cl√≠nicos breves y realistas.
2. **CONTEXTO COMPLETO**: Incluir edad, sexo, antecedentes relevantes y hallazgos cl√≠nicos/paracl√≠nicos t√≠picos del cuadro.
3. **URGENCIA Y MANEJO INMEDIATO**: El foco debe estar en la conducta m√°s inmediata o cr√≠tica en contexto de urgencia.
   - ‚ùå No generar preguntas sobre confirmaci√≥n diagn√≥stica, estudios de laboratorio, prevenci√≥n o manejo cr√≥nico, salvo que la PREGUNTA BASE lo pida expl√≠citamente.
   - Nunca dar a entender que debe "esperarse" un resultado antes de actuar en una urgencia vital.
4. **PR√ÅCTICA CHILENA**: Respuesta correcta alineada con gu√≠as cl√≠nicas del MINSAL y protocolos hospitalarios de Chile.
5. **ALTERNATIVAS**:
   - Exactamente 4 opciones plausibles.
   - 1 correcta (acci√≥n inmediata indicada).
   - 3 distractores cl√≠nicamente veros√≠miles, que representen errores comunes.
   - Variar los distractores entre variaciones (no repetir siempre los mismos).
   - ‚ùå Nunca incluir como distractores ex√°menes de laboratorio, medidas cr√≥nicas, preventivas o irreales.
6. **EXPLICACIONES**:
   - Explicar claramente por qu√© la opci√≥n correcta es la indicada.
   - Explicar por qu√© cada distractor es incorrecto (ej: efecto tard√≠o, no corresponde en urgencia, es medida secundaria, es diagn√≥stico diferencial descartado).
   - Lenguaje claro, riguroso y did√°ctico.
7. **DIVERSIDAD**:
   - Cambiar en cada variaci√≥n aspectos del caso: edad, sexo, comorbilidades, hallazgos cl√≠nicos, contexto (hospital rural, UCI, pediatr√≠a, postoperatorio, etc.).
   - Puede a√±adirse un factor de confusi√≥n frecuente (uso de f√°rmacos, transfusi√≥n, rabdomi√≥lisis, antecedentes sociales o laborales), pero debe quedar claro que la primera medida inmediata no cambia.

üì¶ FORMATO DE RESPUESTA (JSON):
{
  "content": "pregunta variada completa",
  "explanation": "explicaci√≥n general del caso y la respuesta correcta",
  "alternatives": [
    {
      "text": "opci√≥n A",
      "isCorrect": true,
      "explanation": "por qu√© es la opci√≥n correcta"
    },
    {
      "text": "opci√≥n B",
      "isCorrect": false,
      "explanation": "por qu√© es incorrecta en este escenario"
    },
    {
      "text": "opci√≥n C",
      "isCorrect": false,
      "explanation": "por qu√© es incorrecta en este escenario"
    },
    {
      "text": "opci√≥n D",
      "isCorrect": false,
      "explanation": "por qu√© es incorrecta en este escenario"
    }
  ]
}

üõ°Ô∏è EST√ÅNDARES DE CALIDAD:
- Caso cl√≠nico realista con contexto de urgencia claro
- Distractores diversos y veros√≠miles entre variaciones
- Explicaciones completas para todas las alternativas
- Fidelidad a gu√≠as cl√≠nicas chilenas
- M√°xima diversidad en escenarios y presentaciones
- Responder SOLO con JSON v√°lido, sin texto adicional
`;
  }

  /**
   * Parse the analysis response from OpenAI
   */
  private parseAnalysisResponse(response: string): AIAnalysisResult {
    try {
      const parsed = JSON.parse(response);

      // Validate required fields
      const required = ['specialty', 'topic', 'confidence', 'questionType', 'baseDifficulty'];
      for (const field of required) {
        if (!parsed[field]) {
          throw new Error(`Missing required field: ${field}`);
        }
      }

      return {
        specialty: parsed.specialty,
        topic: parsed.topic,
        subtopic: parsed.subtopic || '',
        confidence: Math.max(0, Math.min(1, parsed.confidence)),
        keywords: Array.isArray(parsed.keywords) ? parsed.keywords : [],
        learningObjectives: Array.isArray(parsed.learningObjectives) ? parsed.learningObjectives : [],
        questionType: parsed.questionType,
        baseDifficulty: parsed.baseDifficulty,
        reviewNotes: parsed.reviewNotes || ''
      };

    } catch (error) {
      logger.error('Error parsing OpenAI analysis response:', error);
      logger.error('Raw response:', response);
      throw new Error(`Invalid analysis response: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * Parse the variation response from OpenAI
   */
  private parseVariationResponse(response: string): QuestionVariationResult {
    try {
      const parsed = JSON.parse(response);

      // Validate required fields
      if (!parsed.content || !parsed.explanation || !Array.isArray(parsed.alternatives)) {
        throw new Error('Missing required fields in variation response');
      }

      if (parsed.alternatives.length !== 4) {
        throw new Error('Variation must have exactly 4 alternatives');
      }

      const correctCount = parsed.alternatives.filter((alt: any) => alt.isCorrect).length;
      if (correctCount !== 1) {
        throw new Error('Variation must have exactly 1 correct alternative');
      }

      return {
        content: parsed.content,
        explanation: parsed.explanation,
        alternatives: parsed.alternatives.map((alt: any) => ({
          text: alt.text,
          isCorrect: Boolean(alt.isCorrect),
          explanation: alt.explanation || ''
        }))
      };

    } catch (error) {
      logger.error('Error parsing OpenAI variation response:', error);
      logger.error('Raw response:', response);
      throw new Error(`Invalid variation response: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }
}